package com.mycompany.appserver;

import java.io.IOException;
import java.net.URISyntaxException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.client.ClientProtocolException;

import com.acmelogin.connector.AcmeOpenIdConnectConfiguration;
import com.acmelogin.connector.AcmeOpenIdConnectValidator;
import com.acmelogin.connector.AcmeOpenIdConnector;
import com.acmelogin.connector.AcmeUserTokens;
import com.acmelogin.connector.AcmeUtil;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

/**
 * Servlet implementation class for demonstration of login with Acme.
 * @author Acme Developers
 *
 */
@WebServlet("/AppServlet")
public class AppServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	/**
	 * Configuration object for Acme Login. You may read parameters from configuration file, database etc.
	 */
	private static AcmeOpenIdConnectConfiguration acmeOpenIdConnectConfiguration;
	
	
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AppServlet() {
        super();
        
        /*
         * Initialize Acme Login configuration. Configuration should be initialized within your application startup.
         * You may also store in your Database.
         */
        acmeOpenIdConnectConfiguration = new AcmeOpenIdConnectConfiguration();
        AcmeUtil.initializeConfiguration(acmeOpenIdConnectConfiguration);
    }

    /**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
	
	/**
	 * User is directed back to your application server here after login request is sent to Acme Login. Here, we are handling redirection result.
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		/*
		 * Demonstration handles login and logout requests.
		 */
		if(request.getPathInfo() != null && request.getPathInfo().equals("/logout")) {
			System.out.println("logout requested");
			doLogout(request, response);
			return;
		}
		else {
			System.out.println("login requested");
			doLogin(request, response);
		}
		
	}

	private void doLogin(HttpServletRequest request, HttpServletResponse response) throws ClientProtocolException, IOException {
		/*
		 * Login request redirection result contains authorization code and also state value that was generated by your user client (index.jsp in this project).
		 * State value is optional.
		 */
		String authorizationCode = request.getParameter("code");
		String stateValue = request.getParameter("state");
		
		/*
		 * Read state value that was put in to session while generated by your user client.
		 */
		String clientGeneratedState = (String)request.getSession().getAttribute("state");
		
		/*
		 * Using Acme validator to validate authorization code and state value.
		 * State value is optional.
		 */
		System.out.println("Validating authorization via authorization code and state value");
		AcmeOpenIdConnectValidator acmeValidator = new AcmeOpenIdConnectValidator();
		boolean isValidAuthorization = acmeValidator.validateAuthorization(authorizationCode, stateValue, clientGeneratedState);
		if(!isValidAuthorization) {
			System.out.println("Invalid authorization");
			//TODO ERROR: Here you should handle error and redirect user to error page or restart the flow.
			return;
		}
		
		/*
		 * Authorization is valid. Now getting tokens from Acme Login for the user to complete authentication flow.
		 */
		System.out.println("Authorization is validated. Getting tokens from Acme Login for user");
		
		AcmeOpenIdConnector acmeConnector = new AcmeOpenIdConnector();
		AcmeUserTokens acmeTokens = null;
		try {
			acmeTokens = acmeConnector.getAcmeTokensForUser(acmeOpenIdConnectConfiguration, authorizationCode);
		} catch (URISyntaxException e2) {
			System.out.println("Receiving tokens failed");
			// TODO Here you can ask token again since it might be temporary issue or redirect user to error page to start flow again.
			e2.printStackTrace();
			return;
		}
		
		/*
		 * 'access token' of user is used to get detailed information and later for logout request to end user's session in Acme Login.
		 * So you should keep accessToken in your system till it is expired. It is up to you to keep in session, database etc.
		 * Here we keep accessToken of single user that is subject of this demonstration in the session.  
		 */
		request.getSession().setAttribute("accesstoken", acmeTokens.getAccessToken());
		System.out.println("User access token added to session");
		
		/*
		 * It is recommended to validate Id Token before using it.
		 */
		System.out.println("Access token, Refresh Token and Id Token received. Validating Id Token now");
		boolean isValidIdToken = acmeValidator.validateIdToken(acmeTokens.getAcmeUserIdToken(), acmeOpenIdConnectConfiguration);
		if(!isValidIdToken) {
			System.out.println("Invalid Id Token");
			//TODO ERROR: Here you should handle error and redirect user to error page or restart the flow.
			return;
		}
		
		/*
		 * Id Token is validated and authentication completed. Here you can login authenticated user into your system.  
		 */
		System.out.println("Id Token is valid. User is authenticated");
		
		/*
		 * Acme Login lets you get detailed information of user if you need to use.
		 */
		System.out.println("Getting detailed information of authenticated user");
		String authenticatedUserInfo = "";
		try {
			authenticatedUserInfo = acmeConnector.getUserInfo(acmeOpenIdConnectConfiguration, acmeTokens.getAccessToken());
		} catch (URISyntaxException e) {
			System.out.println("Receiving user info failed");
			// TODO Here you can ask user info again since it might be temporary issue or redirect user to error page to start flow again.
			e.printStackTrace();
			return;
		}
		
		/*
		 * User info a Json string. Its content is up to the user profile that used in the login. 
		 * It is up to you how to use this data. In this demonstration, we use name and email of user to display on landing page. 
		 */
		System.out.println("User information received successfully");
		System.out.println(authenticatedUserInfo);
		JsonObject userInfoData = (JsonObject)new JsonParser().parse(authenticatedUserInfo);
		String displayNameParameter = "displayname="+userInfoData.get("name").getAsString();
		String emailParameter = "email="+userInfoData.get("email").getAsString();
		response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
		response.setHeader("Location", "applanding.html?"+displayNameParameter+"&"+emailParameter);
		System.out.println("end of flow__");
	}
	
	private void doLogout(HttpServletRequest request, HttpServletResponse response) {
		if(request.getSession().getAttribute("accesstoken") == null) {
			System.out.println("No access token found in session");
			//TODO Check how you keep access token.
			return;
		}
		
		String userAccessToken = request.getSession().getAttribute("accesstoken").toString();
		AcmeOpenIdConnector connector = new AcmeOpenIdConnector();
		String logoutRequestUrl = connector.getLogoutRequestUrl(acmeOpenIdConnectConfiguration, userAccessToken);
		request.getSession().removeAttribute("accesstoken");
		
		System.out.println("Logout request to sent to Acme Login for user");
		
		response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
		response.setHeader("Location", logoutRequestUrl);
	}
	
	
}
